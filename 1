#include <iostream>
#include <cstring>

using namespace std;

class Book {
protected:
    char isbn[20];
    char naslov[50];
    char avtor[30];
    double cena;

public:
    Book(char isbn[20], char naslov[50], char avtor[30], double cena) {
        strcpy(this->isbn, isbn);
        strcpy(this->naslov, naslov);
        strcpy(this->avtor, avtor);
        this->cena = cena;
    }
    
    virtual double bookPrice()=0;
    
    void setISBN(char* niza) {
        strcpy(this->isbn, niza);
    }
    
    bool operator>(Book &b) {
        return bookPrice() > b.bookPrice();
    }
    
    friend ostream &operator<<(ostream& os, Book& b) {
        os << b.isbn << ": " << b.naslov << ", " << b.avtor << " " << b.bookPrice() << endl;
        return os;
    }

};

class OnlineBook : public Book {
    char *url;
    int golemina;

public:
    OnlineBook(char isbn[20], char naslov[20], char avtor[30], double cena, char* url, int golemina) : Book(isbn, naslov, avtor, cena) {
        this->golemina = golemina;
        this->url = new char[strlen(url)];
        strcpy(this->url, url);
    }
    
    double bookPrice() {
        return golemina > 20 ? cena + cena * 20/100 : cena;
    }
    
    
};

class PrintBook : public Book {
    double masa;
    bool isZaliha;

public:
    PrintBook(char isbn[20], char naslov[20], char avtor[30], double cena, double masa, bool isZaliha) : Book(isbn, naslov, avtor, cena) {
        this->masa = masa;
        this->isZaliha = isZaliha;
    }
    
    double bookPrice() {
        return masa > 0.7 ? cena + cena * 15/100 : cena;
    }
};

void mostExpensiveBook (Book** books, int n) {
    Book *mostExpensiveBook = books[0];
    int oCounter = 0;
    int pCounter = 0;
    
    for (int i =0; i<n; i++) {
        OnlineBook* k = dynamic_cast<OnlineBook*>(books[i]);
        
        
        if (k) {
            oCounter++;
            if (k->bookPrice() > mostExpensiveBook->bookPrice())
                    mostExpensiveBook = k;
        }
        else {
            PrintBook* p = dynamic_cast<PrintBook*>(books[i]);
            if (p) {
                pCounter++;
                if (p->bookPrice() > mostExpensiveBook->bookPrice())
                    mostExpensiveBook = p;
            }
        }
    }
    
    cout << "FINKI-Education" << endl;
    cout << "Total number of online books: "<< oCounter << endl;
    cout << "Total number of printed books: "<< pCounter << endl;
    cout << "The most expensive book is: " << endl;
    cout << *mostExpensiveBook;
}

int main(){

	char isbn[20], title[50], author[30], url[100];
	int size, tip;
	float price, weight;
	bool inStock;
	Book  **books;
	int n;

	int testCase;
	cin >> testCase;

	if (testCase == 1){
		cout << "====== Testing OnlineBook class ======" << endl;
		cin >> n;
		books = new Book *[n];

		for (int i = 0; i < n; i++){
			cin >> isbn;
			cin.get();
			cin.getline(title, 50);
			cin.getline(author, 30);
			cin >> price;
			cin >> url;
			cin >> size;
			cout << "CONSTRUCTOR" << endl;
			books[i] = new OnlineBook(isbn, title, author, price, url, size);
			cout << "OPERATOR <<" << endl;
			cout << *books[i];
		}
		cout << "OPERATOR >" << endl;
		cout << "Rezultat od sporedbata e: " << endl;
		if (*books[0] > *books[1])
			cout << *books[0];
		else
			cout << *books[1];
	}
	if (testCase == 2){
		cout << "====== Testing OnlineBook CONSTRUCTORS ======" << endl;
		cin >> isbn;
		cin.get();
		cin.getline(title, 50);
		cin.getline(author, 30);
		cin >> price;
		cin >> url;
		cin >> size;
		cout << "CONSTRUCTOR" << endl;
		OnlineBook ob1(isbn, title, author, price, url, size);
		cout << ob1 << endl;
		cout << "COPY CONSTRUCTOR" << endl;
		OnlineBook ob2(ob1);
		cin >> isbn;
		ob2.setISBN(isbn);
		cout << ob1 << endl;
		cout << ob2 << endl;
		cout << "OPERATOR =" << endl;
		ob1 = ob2;
		cin >> isbn;
		ob2.setISBN(isbn);
		cout << ob1 << endl;
		cout << ob2 << endl;
	}
	if (testCase == 3){
		cout << "====== Testing PrintBook class ======" << endl;
		cin >> n;
		books = new Book *[n];

		for (int i = 0; i < n; i++){
			cin >> isbn;
			cin.get();
			cin.getline(title, 50);
			cin.getline(author, 30);
			cin >> price;
			cin >> weight;
			cin >> inStock;
			cout << "CONSTRUCTOR" << endl;
			books[i] = new PrintBook(isbn, title, author, price, weight, inStock);
			cout << "OPERATOR <<" << endl;
			cout << *books[i];
		}
		cout << "OPERATOR >" << endl;
		cout << "Rezultat od sporedbata e: " << endl;
		if (*books[0] > *books[1])
			cout << *books[0];
		else
			cout << *books[1];
	}
	if (testCase == 4){
		cout << "====== Testing method mostExpensiveBook() ======" << endl;
		cin >> n;
		books = new Book *[n];

		for (int i = 0; i<n; i++){

			cin >> tip >> isbn;
			cin.get();
			cin.getline(title, 50);
			cin.getline(author, 30);
			cin >> price;
			if (tip == 1) {

				cin >> url;
				cin >> size;

				books[i] = new OnlineBook(isbn, title, author, price, url, size);

			}
			else {
				cin >> weight;
				cin >> inStock;

				books[i] = new PrintBook(isbn, title, author, price, weight, inStock);
			}
		}

		mostExpensiveBook(books, n);
	}

	for (int i = 0; i<n; i++) delete books[i];
		delete[] books;
	return 0;
}
